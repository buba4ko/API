// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ConsoleApp
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for BorrowedBooks.
    /// </summary>
    public static partial class BorrowedBooksExtensions
    {
            /// <summary>
            /// Get books borrowed by a reader
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='readerID'>
            /// The reader ID
            /// </param>
            public static object Get(this IBorrowedBooks operations, int readerID)
            {
                return Task.Factory.StartNew(s => ((IBorrowedBooks)s).GetAsync(readerID), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get books borrowed by a reader
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='readerID'>
            /// The reader ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IBorrowedBooks operations, int readerID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(readerID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Borrows a book by a reader
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='readerID'>
            /// the reader ID
            /// </param>
            /// <param name='bookID'>
            /// the book ID
            /// </param>
            public static object Post(this IBorrowedBooks operations, int readerID, int bookID)
            {
                return Task.Factory.StartNew(s => ((IBorrowedBooks)s).PostAsync(readerID, bookID), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Borrows a book by a reader
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='readerID'>
            /// the reader ID
            /// </param>
            /// <param name='bookID'>
            /// the book ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAsync(this IBorrowedBooks operations, int readerID, int bookID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(readerID, bookID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a book by a reader
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='readerID'>
            /// the reader ID
            /// </param>
            /// <param name='bookID'>
            /// the book ID
            /// </param>
            public static object Delete(this IBorrowedBooks operations, int readerID, int bookID)
            {
                return Task.Factory.StartNew(s => ((IBorrowedBooks)s).DeleteAsync(readerID, bookID), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a book by a reader
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='readerID'>
            /// the reader ID
            /// </param>
            /// <param name='bookID'>
            /// the book ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IBorrowedBooks operations, int readerID, int bookID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(readerID, bookID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
